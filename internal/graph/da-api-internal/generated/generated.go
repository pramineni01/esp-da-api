// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"bitbucket.org/antuitinc/esp-da-api/internal/datamodels"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	DADataset() DADatasetResolver
	DADatatable() DADatatableResolver
	DAPageInfo() DAPageInfoResolver
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DAAggregatedMeasure struct {
		AggregationType func(childComplexity int) int
		CastType        func(childComplexity int) int
		ColumnName      func(childComplexity int) int
		DatasetID       func(childComplexity int) int
		Formula         func(childComplexity int) int
		ID              func(childComplexity int) int
		Measure         func(childComplexity int) int
	}

	DABranch struct {
		DatasetID func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	DADataframeColumn struct {
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	DADataframeDimLevelQuery struct {
		Metadata  func(childComplexity int) int
		Partition func(childComplexity int) int
		Query     func(childComplexity int) int
	}

	DADataframeMeasureQuery struct {
		MeasureName func(childComplexity int) int
		Metadata    func(childComplexity int) int
		Partition   func(childComplexity int) int
		Query       func(childComplexity int) int
	}

	DADataframeQueries struct {
		DimLevelQueries func(childComplexity int) int
		MeasureQueries  func(childComplexity int) int
		Partitions      func(childComplexity int) int
	}

	DADataset struct {
		DataVersion     func(childComplexity int, version *string, branchID *string) int
		DatasourceID    func(childComplexity int) int
		Datatable       func(childComplexity int, id *string, tableName *string, measureColumnName *string) int
		Description     func(childComplexity int) int
		DimensionLevels func(childComplexity int, dimensionID *string, dimensionColumnName *string) int
		ID              func(childComplexity int) int
		Measures        func(childComplexity int, aggregated *bool) int
		Name            func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	DADatatable struct {
		DataView         func(childComplexity int, branchID *string, version *string, scope *datamodels.DAQueryScopeInput, dimensionLevels []string, aggregatedMeasures []string, userID *string, allData bool, localeID *string, dimMemberAttributes []datamodels.DADimensionMemberAttribute, aliases []*datamodels.DADataViewAlias, partitioned bool) int
		DataframeQueries func(childComplexity int, branchID *string, version *string, scope *datamodels.DAQueryScopeInput, dimensionLevels []string, aggregatedMeasures []string, userID *string, allData bool, localeID *string, dimMemberAttributes []datamodels.DADimensionMemberAttribute, aliases []*datamodels.DADataViewAlias) int
		DatasetID        func(childComplexity int) int
		DimensionLevels  func(childComplexity int, dimensionID *string, dimensionColumnName *string) int
		Id               func(childComplexity int) int
		Measures         func(childComplexity int) int
		StagingTable     func(childComplexity int, branchID *string, scope *datamodels.DAQueryScopeInput, measures []string, userID *string, allData bool, numPartitions *int) int
		TableName        func(childComplexity int) int
	}

	DADimension struct {
		ColumnName func(childComplexity int) int
		DatasetID  func(childComplexity int) int
		ID         func(childComplexity int) int
	}

	DADimensionLevel struct {
		ColumnName func(childComplexity int) int
		DatasetID  func(childComplexity int) int
		Dimension  func(childComplexity int) int
		ID         func(childComplexity int) int
	}

	DADimensionMember struct {
		DatasetID                func(childComplexity int) int
		Description              func(childComplexity int) int
		DimensionLevelColumnName func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		Name                     func(childComplexity int) int
	}

	DAMeasure struct {
		CastType    func(childComplexity int) int
		ColumnName  func(childComplexity int) int
		DatasetID   func(childComplexity int) int
		DatatableID func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	DAPageInfo struct {
		HasNextPage func(childComplexity int) int
		TotalRows   func(childComplexity int) int
	}

	DAQueryResult struct {
		DimensionMembers func(childComplexity int) int
		MeasureValues    func(childComplexity int) int
	}

	DAQueryResultConnection struct {
		Edges    func(childComplexity int) int
		Error    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	DAQueryResultEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DASQLQuery struct {
		Metadata           func(childComplexity int) int
		PartitionedQueries func(childComplexity int) int
		Query              func(childComplexity int) int
	}

	DASQLQueryColumn struct {
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	DAStagingTable struct {
		DatasetID func(childComplexity int) int
		Id        func(childComplexity int) int
		TableName func(childComplexity int) int
	}

	DAVersion struct {
		AppliedTimestamp   func(childComplexity int) int
		BranchID           func(childComplexity int) int
		ID                 func(childComplexity int) int
		KeepAliveTimestamp func(childComplexity int) int
		StartedTimestamp   func(childComplexity int) int
		Status             func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	Entity struct {
		FindDAAggregatedMeasureByDatasetIDAndColumnName func(childComplexity int, datasetID string, columnName string) int
		FindDABranchByDatasetIDAndID                    func(childComplexity int, datasetID string, id string) int
		FindDADatasetByID                               func(childComplexity int, id string) int
		FindDADatatableByDatasetIDAndID                 func(childComplexity int, datasetID string, id string) int
		FindDADimensionByDatasetIDAndColumnName         func(childComplexity int, datasetID string, columnName string) int
		FindDADimensionLevelByDatasetIDAndColumnName    func(childComplexity int, datasetID string, columnName string) int
		FindDADimensionMemberByDatasetIDAndID           func(childComplexity int, datasetID string, id string) int
		FindDAMeasureByDatasetIDAndColumnName           func(childComplexity int, datasetID string, columnName string) int
	}

	Mutation struct {
		DaIngestStagingTables func(childComplexity int, datasetID string, stagingTableIDs []string) int
	}

	Query struct {
		DaDataset          func(childComplexity int, id string) int
		__resolve__service func(childComplexity int) int
		__resolve_entities func(childComplexity int, representations []map[string]interface{}) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type DADatasetResolver interface {
	DataVersion(ctx context.Context, obj *datamodels.DADataset, version *string, branchID *string) (*datamodels.DAVersion, error)
	Datatable(ctx context.Context, obj *datamodels.DADataset, id *string, tableName *string, measureColumnName *string) (*datamodels.DADatatable, error)
	DimensionLevels(ctx context.Context, obj *datamodels.DADataset, dimensionID *string, dimensionColumnName *string) ([]*datamodels.DADimensionLevel, error)
	Measures(ctx context.Context, obj *datamodels.DADataset, aggregated *bool) ([]datamodels.DADatasetMeasure, error)
}
type DADatatableResolver interface {
	DimensionLevels(ctx context.Context, obj *datamodels.DADatatable, dimensionID *string, dimensionColumnName *string) ([]*datamodels.DADimensionLevel, error)
	Measures(ctx context.Context, obj *datamodels.DADatatable) ([]*datamodels.DAMeasure, error)
	DataView(ctx context.Context, obj *datamodels.DADatatable, branchID *string, version *string, scope *datamodels.DAQueryScopeInput, dimensionLevels []string, aggregatedMeasures []string, userID *string, allData bool, localeID *string, dimMemberAttributes []datamodels.DADimensionMemberAttribute, aliases []*datamodels.DADataViewAlias, partitioned bool) (*datamodels.DASQLQuery, error)
	DataframeQueries(ctx context.Context, obj *datamodels.DADatatable, branchID *string, version *string, scope *datamodels.DAQueryScopeInput, dimensionLevels []string, aggregatedMeasures []string, userID *string, allData bool, localeID *string, dimMemberAttributes []datamodels.DADimensionMemberAttribute, aliases []*datamodels.DADataViewAlias) (*datamodels.DADataframeQueries, error)
	StagingTable(ctx context.Context, obj *datamodels.DADatatable, branchID *string, scope *datamodels.DAQueryScopeInput, measures []string, userID *string, allData bool, numPartitions *int) (*datamodels.DAStagingTable, error)
}
type DAPageInfoResolver interface {
	TotalRows(ctx context.Context, obj *datamodels.DAPageInfo) (*int, error)
}
type EntityResolver interface {
	FindDAAggregatedMeasureByDatasetIDAndColumnName(ctx context.Context, datasetID string, columnName string) (*datamodels.DAAggregatedMeasure, error)
	FindDABranchByDatasetIDAndID(ctx context.Context, datasetID string, id string) (*datamodels.DABranch, error)
	FindDADatasetByID(ctx context.Context, id string) (*datamodels.DADataset, error)
	FindDADatatableByDatasetIDAndID(ctx context.Context, datasetID string, id string) (*datamodels.DADatatable, error)
	FindDADimensionByDatasetIDAndColumnName(ctx context.Context, datasetID string, columnName string) (*datamodels.DADimension, error)
	FindDADimensionLevelByDatasetIDAndColumnName(ctx context.Context, datasetID string, columnName string) (*datamodels.DADimensionLevel, error)
	FindDADimensionMemberByDatasetIDAndID(ctx context.Context, datasetID string, id string) (*datamodels.DADimensionMember, error)
	FindDAMeasureByDatasetIDAndColumnName(ctx context.Context, datasetID string, columnName string) (*datamodels.DAMeasure, error)
}
type MutationResolver interface {
	DaIngestStagingTables(ctx context.Context, datasetID string, stagingTableIDs []string) (*string, error)
}
type QueryResolver interface {
	DaDataset(ctx context.Context, id string) (*datamodels.DADataset, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DAAggregatedMeasure.aggregationType":
		if e.complexity.DAAggregatedMeasure.AggregationType == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.AggregationType(childComplexity), true

	case "DAAggregatedMeasure.castType":
		if e.complexity.DAAggregatedMeasure.CastType == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.CastType(childComplexity), true

	case "DAAggregatedMeasure.columnName":
		if e.complexity.DAAggregatedMeasure.ColumnName == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.ColumnName(childComplexity), true

	case "DAAggregatedMeasure.datasetID":
		if e.complexity.DAAggregatedMeasure.DatasetID == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.DatasetID(childComplexity), true

	case "DAAggregatedMeasure.formula":
		if e.complexity.DAAggregatedMeasure.Formula == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.Formula(childComplexity), true

	case "DAAggregatedMeasure.id":
		if e.complexity.DAAggregatedMeasure.ID == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.ID(childComplexity), true

	case "DAAggregatedMeasure.measure":
		if e.complexity.DAAggregatedMeasure.Measure == nil {
			break
		}

		return e.complexity.DAAggregatedMeasure.Measure(childComplexity), true

	case "DABranch.datasetID":
		if e.complexity.DABranch.DatasetID == nil {
			break
		}

		return e.complexity.DABranch.DatasetID(childComplexity), true

	case "DABranch.id":
		if e.complexity.DABranch.ID == nil {
			break
		}

		return e.complexity.DABranch.ID(childComplexity), true

	case "DADataframeColumn.name":
		if e.complexity.DADataframeColumn.Name == nil {
			break
		}

		return e.complexity.DADataframeColumn.Name(childComplexity), true

	case "DADataframeColumn.type":
		if e.complexity.DADataframeColumn.Type == nil {
			break
		}

		return e.complexity.DADataframeColumn.Type(childComplexity), true

	case "DADataframeDimLevelQuery.metadata":
		if e.complexity.DADataframeDimLevelQuery.Metadata == nil {
			break
		}

		return e.complexity.DADataframeDimLevelQuery.Metadata(childComplexity), true

	case "DADataframeDimLevelQuery.partition":
		if e.complexity.DADataframeDimLevelQuery.Partition == nil {
			break
		}

		return e.complexity.DADataframeDimLevelQuery.Partition(childComplexity), true

	case "DADataframeDimLevelQuery.query":
		if e.complexity.DADataframeDimLevelQuery.Query == nil {
			break
		}

		return e.complexity.DADataframeDimLevelQuery.Query(childComplexity), true

	case "DADataframeMeasureQuery.measureName":
		if e.complexity.DADataframeMeasureQuery.MeasureName == nil {
			break
		}

		return e.complexity.DADataframeMeasureQuery.MeasureName(childComplexity), true

	case "DADataframeMeasureQuery.metadata":
		if e.complexity.DADataframeMeasureQuery.Metadata == nil {
			break
		}

		return e.complexity.DADataframeMeasureQuery.Metadata(childComplexity), true

	case "DADataframeMeasureQuery.partition":
		if e.complexity.DADataframeMeasureQuery.Partition == nil {
			break
		}

		return e.complexity.DADataframeMeasureQuery.Partition(childComplexity), true

	case "DADataframeMeasureQuery.query":
		if e.complexity.DADataframeMeasureQuery.Query == nil {
			break
		}

		return e.complexity.DADataframeMeasureQuery.Query(childComplexity), true

	case "DADataframeQueries.dimLevelQueries":
		if e.complexity.DADataframeQueries.DimLevelQueries == nil {
			break
		}

		return e.complexity.DADataframeQueries.DimLevelQueries(childComplexity), true

	case "DADataframeQueries.measureQueries":
		if e.complexity.DADataframeQueries.MeasureQueries == nil {
			break
		}

		return e.complexity.DADataframeQueries.MeasureQueries(childComplexity), true

	case "DADataframeQueries.partitions":
		if e.complexity.DADataframeQueries.Partitions == nil {
			break
		}

		return e.complexity.DADataframeQueries.Partitions(childComplexity), true

	case "DADataset.dataVersion":
		if e.complexity.DADataset.DataVersion == nil {
			break
		}

		args, err := ec.field_DADataset_dataVersion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADataset.DataVersion(childComplexity, args["version"].(*string), args["branchID"].(*string)), true

	case "DADataset.datasourceID":
		if e.complexity.DADataset.DatasourceID == nil {
			break
		}

		return e.complexity.DADataset.DatasourceID(childComplexity), true

	case "DADataset.datatable":
		if e.complexity.DADataset.Datatable == nil {
			break
		}

		args, err := ec.field_DADataset_datatable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADataset.Datatable(childComplexity, args["id"].(*string), args["tableName"].(*string), args["measureColumnName"].(*string)), true

	case "DADataset.description":
		if e.complexity.DADataset.Description == nil {
			break
		}

		return e.complexity.DADataset.Description(childComplexity), true

	case "DADataset.dimensionLevels":
		if e.complexity.DADataset.DimensionLevels == nil {
			break
		}

		args, err := ec.field_DADataset_dimensionLevels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADataset.DimensionLevels(childComplexity, args["dimensionID"].(*string), args["dimensionColumnName"].(*string)), true

	case "DADataset.id":
		if e.complexity.DADataset.ID == nil {
			break
		}

		return e.complexity.DADataset.ID(childComplexity), true

	case "DADataset.measures":
		if e.complexity.DADataset.Measures == nil {
			break
		}

		args, err := ec.field_DADataset_measures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADataset.Measures(childComplexity, args["aggregated"].(*bool)), true

	case "DADataset.name":
		if e.complexity.DADataset.Name == nil {
			break
		}

		return e.complexity.DADataset.Name(childComplexity), true

	case "DADataset.version":
		if e.complexity.DADataset.Version == nil {
			break
		}

		return e.complexity.DADataset.Version(childComplexity), true

	case "DADatatable.dataView":
		if e.complexity.DADatatable.DataView == nil {
			break
		}

		args, err := ec.field_DADatatable_dataView_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADatatable.DataView(childComplexity, args["branchID"].(*string), args["version"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["dimensionLevels"].([]string), args["aggregatedMeasures"].([]string), args["userID"].(*string), args["allData"].(bool), args["localeID"].(*string), args["dimMemberAttributes"].([]datamodels.DADimensionMemberAttribute), args["aliases"].([]*datamodels.DADataViewAlias), args["partitioned"].(bool)), true

	case "DADatatable.dataframeQueries":
		if e.complexity.DADatatable.DataframeQueries == nil {
			break
		}

		args, err := ec.field_DADatatable_dataframeQueries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADatatable.DataframeQueries(childComplexity, args["branchID"].(*string), args["version"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["dimensionLevels"].([]string), args["aggregatedMeasures"].([]string), args["userID"].(*string), args["allData"].(bool), args["localeID"].(*string), args["dimMemberAttributes"].([]datamodels.DADimensionMemberAttribute), args["aliases"].([]*datamodels.DADataViewAlias)), true

	case "DADatatable.datasetID":
		if e.complexity.DADatatable.DatasetID == nil {
			break
		}

		return e.complexity.DADatatable.DatasetID(childComplexity), true

	case "DADatatable.dimensionLevels":
		if e.complexity.DADatatable.DimensionLevels == nil {
			break
		}

		args, err := ec.field_DADatatable_dimensionLevels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADatatable.DimensionLevels(childComplexity, args["dimensionID"].(*string), args["dimensionColumnName"].(*string)), true

	case "DADatatable.id":
		if e.complexity.DADatatable.Id == nil {
			break
		}

		return e.complexity.DADatatable.Id(childComplexity), true

	case "DADatatable.measures":
		if e.complexity.DADatatable.Measures == nil {
			break
		}

		return e.complexity.DADatatable.Measures(childComplexity), true

	case "DADatatable.stagingTable":
		if e.complexity.DADatatable.StagingTable == nil {
			break
		}

		args, err := ec.field_DADatatable_stagingTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DADatatable.StagingTable(childComplexity, args["branchID"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["measures"].([]string), args["userID"].(*string), args["allData"].(bool), args["numPartitions"].(*int)), true

	case "DADatatable.tableName":
		if e.complexity.DADatatable.TableName == nil {
			break
		}

		return e.complexity.DADatatable.TableName(childComplexity), true

	case "DADimension.columnName":
		if e.complexity.DADimension.ColumnName == nil {
			break
		}

		return e.complexity.DADimension.ColumnName(childComplexity), true

	case "DADimension.datasetID":
		if e.complexity.DADimension.DatasetID == nil {
			break
		}

		return e.complexity.DADimension.DatasetID(childComplexity), true

	case "DADimension.id":
		if e.complexity.DADimension.ID == nil {
			break
		}

		return e.complexity.DADimension.ID(childComplexity), true

	case "DADimensionLevel.columnName":
		if e.complexity.DADimensionLevel.ColumnName == nil {
			break
		}

		return e.complexity.DADimensionLevel.ColumnName(childComplexity), true

	case "DADimensionLevel.datasetID":
		if e.complexity.DADimensionLevel.DatasetID == nil {
			break
		}

		return e.complexity.DADimensionLevel.DatasetID(childComplexity), true

	case "DADimensionLevel.dimension":
		if e.complexity.DADimensionLevel.Dimension == nil {
			break
		}

		return e.complexity.DADimensionLevel.Dimension(childComplexity), true

	case "DADimensionLevel.id":
		if e.complexity.DADimensionLevel.ID == nil {
			break
		}

		return e.complexity.DADimensionLevel.ID(childComplexity), true

	case "DADimensionMember.datasetID":
		if e.complexity.DADimensionMember.DatasetID == nil {
			break
		}

		return e.complexity.DADimensionMember.DatasetID(childComplexity), true

	case "DADimensionMember.description":
		if e.complexity.DADimensionMember.Description == nil {
			break
		}

		return e.complexity.DADimensionMember.Description(childComplexity), true

	case "DADimensionMember.dimensionLevelColumnName":
		if e.complexity.DADimensionMember.DimensionLevelColumnName == nil {
			break
		}

		return e.complexity.DADimensionMember.DimensionLevelColumnName(childComplexity), true

	case "DADimensionMember.externalID":
		if e.complexity.DADimensionMember.ExternalID == nil {
			break
		}

		return e.complexity.DADimensionMember.ExternalID(childComplexity), true

	case "DADimensionMember.id":
		if e.complexity.DADimensionMember.ID == nil {
			break
		}

		return e.complexity.DADimensionMember.ID(childComplexity), true

	case "DADimensionMember.name":
		if e.complexity.DADimensionMember.Name == nil {
			break
		}

		return e.complexity.DADimensionMember.Name(childComplexity), true

	case "DAMeasure.castType":
		if e.complexity.DAMeasure.CastType == nil {
			break
		}

		return e.complexity.DAMeasure.CastType(childComplexity), true

	case "DAMeasure.columnName":
		if e.complexity.DAMeasure.ColumnName == nil {
			break
		}

		return e.complexity.DAMeasure.ColumnName(childComplexity), true

	case "DAMeasure.datasetID":
		if e.complexity.DAMeasure.DatasetID == nil {
			break
		}

		return e.complexity.DAMeasure.DatasetID(childComplexity), true

	case "DAMeasure.datatableID":
		if e.complexity.DAMeasure.DatatableID == nil {
			break
		}

		return e.complexity.DAMeasure.DatatableID(childComplexity), true

	case "DAMeasure.id":
		if e.complexity.DAMeasure.ID == nil {
			break
		}

		return e.complexity.DAMeasure.ID(childComplexity), true

	case "DAPageInfo.hasNextPage":
		if e.complexity.DAPageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.DAPageInfo.HasNextPage(childComplexity), true

	case "DAPageInfo.totalRows":
		if e.complexity.DAPageInfo.TotalRows == nil {
			break
		}

		return e.complexity.DAPageInfo.TotalRows(childComplexity), true

	case "DAQueryResult.dimensionMembers":
		if e.complexity.DAQueryResult.DimensionMembers == nil {
			break
		}

		return e.complexity.DAQueryResult.DimensionMembers(childComplexity), true

	case "DAQueryResult.measureValues":
		if e.complexity.DAQueryResult.MeasureValues == nil {
			break
		}

		return e.complexity.DAQueryResult.MeasureValues(childComplexity), true

	case "DAQueryResultConnection.edges":
		if e.complexity.DAQueryResultConnection.Edges == nil {
			break
		}

		return e.complexity.DAQueryResultConnection.Edges(childComplexity), true

	case "DAQueryResultConnection.error":
		if e.complexity.DAQueryResultConnection.Error == nil {
			break
		}

		return e.complexity.DAQueryResultConnection.Error(childComplexity), true

	case "DAQueryResultConnection.pageInfo":
		if e.complexity.DAQueryResultConnection.PageInfo == nil {
			break
		}

		return e.complexity.DAQueryResultConnection.PageInfo(childComplexity), true

	case "DAQueryResultEdge.cursor":
		if e.complexity.DAQueryResultEdge.Cursor == nil {
			break
		}

		return e.complexity.DAQueryResultEdge.Cursor(childComplexity), true

	case "DAQueryResultEdge.node":
		if e.complexity.DAQueryResultEdge.Node == nil {
			break
		}

		return e.complexity.DAQueryResultEdge.Node(childComplexity), true

	case "DASQLQuery.metadata":
		if e.complexity.DASQLQuery.Metadata == nil {
			break
		}

		return e.complexity.DASQLQuery.Metadata(childComplexity), true

	case "DASQLQuery.partitionedQueries":
		if e.complexity.DASQLQuery.PartitionedQueries == nil {
			break
		}

		return e.complexity.DASQLQuery.PartitionedQueries(childComplexity), true

	case "DASQLQuery.query":
		if e.complexity.DASQLQuery.Query == nil {
			break
		}

		return e.complexity.DASQLQuery.Query(childComplexity), true

	case "DASQLQueryColumn.name":
		if e.complexity.DASQLQueryColumn.Name == nil {
			break
		}

		return e.complexity.DASQLQueryColumn.Name(childComplexity), true

	case "DASQLQueryColumn.type":
		if e.complexity.DASQLQueryColumn.Type == nil {
			break
		}

		return e.complexity.DASQLQueryColumn.Type(childComplexity), true

	case "DAStagingTable.datasetID":
		if e.complexity.DAStagingTable.DatasetID == nil {
			break
		}

		return e.complexity.DAStagingTable.DatasetID(childComplexity), true

	case "DAStagingTable.id":
		if e.complexity.DAStagingTable.Id == nil {
			break
		}

		return e.complexity.DAStagingTable.Id(childComplexity), true

	case "DAStagingTable.tableName":
		if e.complexity.DAStagingTable.TableName == nil {
			break
		}

		return e.complexity.DAStagingTable.TableName(childComplexity), true

	case "DAVersion.appliedTimestamp":
		if e.complexity.DAVersion.AppliedTimestamp == nil {
			break
		}

		return e.complexity.DAVersion.AppliedTimestamp(childComplexity), true

	case "DAVersion.branchID":
		if e.complexity.DAVersion.BranchID == nil {
			break
		}

		return e.complexity.DAVersion.BranchID(childComplexity), true

	case "DAVersion.id":
		if e.complexity.DAVersion.ID == nil {
			break
		}

		return e.complexity.DAVersion.ID(childComplexity), true

	case "DAVersion.keepaliveTimestamp":
		if e.complexity.DAVersion.KeepAliveTimestamp == nil {
			break
		}

		return e.complexity.DAVersion.KeepAliveTimestamp(childComplexity), true

	case "DAVersion.startedTimestamp":
		if e.complexity.DAVersion.StartedTimestamp == nil {
			break
		}

		return e.complexity.DAVersion.StartedTimestamp(childComplexity), true

	case "DAVersion.status":
		if e.complexity.DAVersion.Status == nil {
			break
		}

		return e.complexity.DAVersion.Status(childComplexity), true

	case "DAVersion.userID":
		if e.complexity.DAVersion.UserID == nil {
			break
		}

		return e.complexity.DAVersion.UserID(childComplexity), true

	case "Entity.findDAAggregatedMeasureByDatasetIDAndColumnName":
		if e.complexity.Entity.FindDAAggregatedMeasureByDatasetIDAndColumnName == nil {
			break
		}

		args, err := ec.field_Entity_findDAAggregatedMeasureByDatasetIDAndColumnName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDAAggregatedMeasureByDatasetIDAndColumnName(childComplexity, args["datasetID"].(string), args["columnName"].(string)), true

	case "Entity.findDABranchByDatasetIDAndID":
		if e.complexity.Entity.FindDABranchByDatasetIDAndID == nil {
			break
		}

		args, err := ec.field_Entity_findDABranchByDatasetIDAndID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDABranchByDatasetIDAndID(childComplexity, args["datasetID"].(string), args["id"].(string)), true

	case "Entity.findDADatasetByID":
		if e.complexity.Entity.FindDADatasetByID == nil {
			break
		}

		args, err := ec.field_Entity_findDADatasetByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDADatasetByID(childComplexity, args["id"].(string)), true

	case "Entity.findDADatatableByDatasetIDAndID":
		if e.complexity.Entity.FindDADatatableByDatasetIDAndID == nil {
			break
		}

		args, err := ec.field_Entity_findDADatatableByDatasetIDAndID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDADatatableByDatasetIDAndID(childComplexity, args["datasetID"].(string), args["id"].(string)), true

	case "Entity.findDADimensionByDatasetIDAndColumnName":
		if e.complexity.Entity.FindDADimensionByDatasetIDAndColumnName == nil {
			break
		}

		args, err := ec.field_Entity_findDADimensionByDatasetIDAndColumnName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDADimensionByDatasetIDAndColumnName(childComplexity, args["datasetID"].(string), args["columnName"].(string)), true

	case "Entity.findDADimensionLevelByDatasetIDAndColumnName":
		if e.complexity.Entity.FindDADimensionLevelByDatasetIDAndColumnName == nil {
			break
		}

		args, err := ec.field_Entity_findDADimensionLevelByDatasetIDAndColumnName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDADimensionLevelByDatasetIDAndColumnName(childComplexity, args["datasetID"].(string), args["columnName"].(string)), true

	case "Entity.findDADimensionMemberByDatasetIDAndID":
		if e.complexity.Entity.FindDADimensionMemberByDatasetIDAndID == nil {
			break
		}

		args, err := ec.field_Entity_findDADimensionMemberByDatasetIDAndID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDADimensionMemberByDatasetIDAndID(childComplexity, args["datasetID"].(string), args["id"].(string)), true

	case "Entity.findDAMeasureByDatasetIDAndColumnName":
		if e.complexity.Entity.FindDAMeasureByDatasetIDAndColumnName == nil {
			break
		}

		args, err := ec.field_Entity_findDAMeasureByDatasetIDAndColumnName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDAMeasureByDatasetIDAndColumnName(childComplexity, args["datasetID"].(string), args["columnName"].(string)), true

	case "Mutation.daIngestStagingTables":
		if e.complexity.Mutation.DaIngestStagingTables == nil {
			break
		}

		args, err := ec.field_Mutation_daIngestStagingTables_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DaIngestStagingTables(childComplexity, args["datasetID"].(string), args["stagingTableIDs"].([]string)), true

	case "Query.daDataset":
		if e.complexity.Query.DaDataset == nil {
			break
		}

		args, err := ec.field_Query_daDataset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DaDataset(childComplexity, args["id"].(string)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../api/da-api-internal/schema.graphql", Input: `extend type Query {
    daDataset(
        id: ID!
    ): DADataset
}

extend type Mutation {
    daIngestStagingTables(
        datasetID: ID!
        stagingTableIDs: [ID!]!
    ): ID
}


# Input

input DADataViewAlias {
    src: String!
    dst: String!
}


# Local types

scalar Time

type DADataset @key(fields: "id") {
    id: ID!
    name: String!
    description: String!
    version: String!
    datasourceID: ID!

    dataVersion(
        version: ID
        branchID: ID
    ): DAVersion

    datatable(
        id: ID
        tableName: ID
        measureColumnName: ID
    ): DADatatable

    dimensionLevels(
        dimensionID: ID
        dimensionColumnName: ID
    ): [DADimensionLevel!]

    measures(
        aggregated: Boolean
    ): [DADatasetMeasure!]
}

type DADatatable @key(fields: "datasetID id") {
    datasetID: ID!
    id: ID!
    tableName: ID!

    dimensionLevels(
        dimensionID: ID
        dimensionColumnName: ID
    ): [DADimensionLevel!]

    measures: [DAMeasure!]

    dataView(
        branchID: ID
        version: ID
        scope: DAQueryScopeInput
        dimensionLevels: [ID!]
        aggregatedMeasures: [ID!]!
        userID: ID
        allData: Boolean! = false
        localeID: ID
        dimMemberAttributes: [DADimensionMemberAttribute!]
        aliases: [DADataViewAlias!]
        partitioned: Boolean! = false
    ): DASQLQuery!

    dataframeQueries(
        branchID: ID
        version: ID
        scope: DAQueryScopeInput
        dimensionLevels: [ID!]
        aggregatedMeasures: [ID!]!
        userID: ID
        allData: Boolean! = false
        localeID: ID
        dimMemberAttributes: [DADimensionMemberAttribute!]
        aliases: [DADataViewAlias!]
    ): DADataframeQueries!

    stagingTable(
        branchID: ID
        scope: DAQueryScopeInput
        measures: [ID!]!
        userID: ID
        allData: Boolean! = false
        numPartitions: Int = 0
    ): DAStagingTable!
}

type DAVersion {
    id: ID!
    branchID: ID
    userID: ID
    status: DAVersionStatus
    appliedTimestamp: Time
    startedTimestamp: Time
    keepaliveTimestamp: Time
}

enum DAVersionStatus {
    PENDING
    IN_PROGRESS
    ERROR
    APPLIED
}

enum DADimensionMemberAttribute {
    NAME
    DESCRIPTION
    EXTERNAL_ID
}

type DADimension @key(fields: "datasetID columnName") {
    datasetID: ID!
    id: ID!
    columnName: ID!
}

type DADimensionLevel @key(fields: "datasetID columnName") {
    datasetID: ID!
    id: ID!
    dimension: DADimension!
    columnName: ID!
}

enum DAMeasureCastType {
    BINARY
    CHAR
    DATE
    DATETIME
    DOUBLE
    FLOAT
    SIGNED INTEGER
    UNSIGNED INTEGER
    TIME
}

type DAMeasure @key(fields: "datasetID columnName") {
    datasetID: ID!
    id: ID!
    datatableID: ID!
    columnName: ID!
    castType: DAMeasureCastType!
}

type DAAggregatedMeasure @key(fields: "datasetID columnName") {
    datasetID: ID!
    id: ID!
    measure: DAMeasure!
    aggregationType: DAAggregationType!
    formula: String
    columnName: ID!
    castType: DAMeasureCastType!
}

enum DAAggregationType {
    COUNT
    SUM
    MIN
    MAX
    BASE_ONLY
    FORMULA
}

union DADatasetMeasure = DAMeasure | DAAggregatedMeasure

type DABranch @key(fields: "datasetID id")  {
    datasetID: ID!
    id: ID!
}

type DAStagingTable {
    datasetID: ID!
    id: ID!
    tableName: String!
}

type DASQLQuery {
    metadata: [DASQLQueryColumn]!
    query: String
    partitionedQueries: [String!]
}

type DASQLQueryColumn {
    name: String!
    type: DAMeasureCastType!
}

type DADataframeQueries {
    partitions: Int!
    dimLevelQueries: [DADataframeDimLevelQuery!]
    measureQueries: [DADataframeMeasureQuery!]
}

type DADataframeDimLevelQuery {
    query: String!
    partition: Int!
    metadata: [DADataframeColumn]!
}

type DADataframeMeasureQuery {
    measureName: String!
    query: String!
    partition: Int!
    metadata: [DADataframeColumn]!
}

type DADataframeColumn {
    name: String!
    type: DAMeasureCastType!
}`, BuiltIn: false},
	{Name: "../../api/common.graphql", Input: `# Input

input DAQueryInput {
    datasetID: ID!
    datatable: ID!
    branchID: ID
    version: ID
    scope: DAQueryScopeInput
    dimensionLevels: [ID!]!
    aggregatedMeasures: [ID!]!
    postAggFilter: DAQueryPostAggFilterInput
    sort: DAQuerySortInput
    postAggGrouping: DAQueryPostAggGroupingInput
    # Pagination
    first: Int
    after: String
}

input DADimMembersQueryInput {
    datasetID: ID!
    datatable: ID!
    branchID: ID
    version: ID
    scope: DAQueryScopeInput
    search: DAQuerySearchInput
    dimensionLevels: [ID!]!
    sort: DAQuerySortInput

    # Pagination
    first: Int
    after: String
}

input DAQueryScopeInput {
  dimensionFilters: [DADimensionFilterInput!]
}
 
input DADimensionFilterInput {
  dimensionColumnName: ID!
  and: [DADimensionLevelFilterInput!]
  or: [DADimensionLevelFilterInput!]
}

input DADimensionLevelFilterInput {
  dimensionLevelColumnName: ID!
  cmpOperator: DAComparisonOperator!
  values: [ID!]!
}

enum DAComparisonOperator {
    IN
}

input DAQuerySearchInput {
    dimensionFilters: [DADimensionSearchFilterInput!]
}

input DADimensionSearchFilterInput {
    dimensionColumnName: ID!
    levelFilters: [DADimensionLevelSearchFilterInput!]!
}

input DADimensionLevelSearchFilterInput {
    dimensionLevelColumnName: ID!
    keyword: String!
}

input DAQueryPostAggFilterInput {
    measureFilters: [DAMeasureFilterInput!]
    and: [DAMeasureFilterInput!]
    or: [DAMeasureFilterInput!]
}

input DAQueryPostAggGroupingInput {
    groupByColumns: [ID!]!
    aggregatedMeasures: [ID!]!
}

input DAMeasureFilterInput {
    measureColumnName: ID!
    measureMultiplier: Float
    operator: DARelationalOperator!
    value: [DADatasetMeasureValue!]
    dstMeasureColumnName: ID
    dstMultiplier: Float
}

enum DARelationalOperator {
    EQ
    NE
    GE
    GT
    LE
    LT
    IN
}

input DAQuerySortInput {
    entries: [DAQuerySortEntryInput!]
}

input DAQuerySortEntryInput {
    columnName: ID!
    direction: DAQuerySortDirection!
}

enum DAQuerySortDirection {
    ASC
    DESC
}

enum DADataUpdateType {
    PLUGGING
    EQUAL_SPLIT
    WEIGHTED
}


# Types

scalar DADatasetMeasureValue

type DAPageInfo {
    totalRows: Int
    hasNextPage: Boolean!
}

type DAQueryResultConnection {
    edges: [DAQueryResultEdge]
    pageInfo: DAPageInfo!
    error: String
}

type DAQueryResultEdge {
    node: DAQueryResult
    cursor: String!
}

type DAQueryResult {
    dimensionMembers: [DADimensionMember!]
    measureValues: [DADatasetMeasureValue]
}

type DADimensionMember @key(fields: "datasetID id") {
    datasetID: ID!
    id: ID!
    dimensionLevelColumnName: ID!
    name: String!
    description: String
    externalID: ID
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
	{Name: "federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = DAAggregatedMeasure | DABranch | DADataset | DADatatable | DADimension | DADimensionLevel | DADimensionMember | DAMeasure

# fake type to build resolver interfaces for users to implement
type Entity {
		findDAAggregatedMeasureByDatasetIDAndColumnName(datasetID: ID!,columnName: ID!,): DAAggregatedMeasure!
	findDABranchByDatasetIDAndID(datasetID: ID!,id: ID!,): DABranch!
	findDADatasetByID(id: ID!,): DADataset!
	findDADatatableByDatasetIDAndID(datasetID: ID!,id: ID!,): DADatatable!
	findDADimensionByDatasetIDAndColumnName(datasetID: ID!,columnName: ID!,): DADimension!
	findDADimensionLevelByDatasetIDAndColumnName(datasetID: ID!,columnName: ID!,): DADimensionLevel!
	findDADimensionMemberByDatasetIDAndID(datasetID: ID!,id: ID!,): DADimensionMember!
	findDAMeasureByDatasetIDAndColumnName(datasetID: ID!,columnName: ID!,): DAMeasure!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_DADataset_dataVersion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["branchID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branchID"] = arg1
	return args, nil
}

func (ec *executionContext) field_DADataset_datatable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["tableName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableName"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tableName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["measureColumnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("measureColumnName"))
		arg2, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["measureColumnName"] = arg2
	return args, nil
}

func (ec *executionContext) field_DADataset_dimensionLevels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["dimensionID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["dimensionColumnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionColumnName"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionColumnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_DADataset_measures_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["aggregated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aggregated"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["aggregated"] = arg0
	return args, nil
}

func (ec *executionContext) field_DADatatable_dataView_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["branchID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branchID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	var arg2 *datamodels.DAQueryScopeInput
	if tmp, ok := rawArgs["scope"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scope"))
		arg2, err = ec.unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scope"] = arg2
	var arg3 []string
	if tmp, ok := rawArgs["dimensionLevels"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevels"))
		arg3, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionLevels"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["aggregatedMeasures"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aggregatedMeasures"))
		arg4, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["aggregatedMeasures"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userID"))
		arg5, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg5
	var arg6 bool
	if tmp, ok := rawArgs["allData"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("allData"))
		arg6, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allData"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["localeID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("localeID"))
		arg7, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["localeID"] = arg7
	var arg8 []datamodels.DADimensionMemberAttribute
	if tmp, ok := rawArgs["dimMemberAttributes"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimMemberAttributes"))
		arg8, err = ec.unmarshalODADimensionMemberAttribute2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttributeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimMemberAttributes"] = arg8
	var arg9 []*datamodels.DADataViewAlias
	if tmp, ok := rawArgs["aliases"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aliases"))
		arg9, err = ec.unmarshalODADataViewAlias2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataViewAliasᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["aliases"] = arg9
	var arg10 bool
	if tmp, ok := rawArgs["partitioned"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("partitioned"))
		arg10, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["partitioned"] = arg10
	return args, nil
}

func (ec *executionContext) field_DADatatable_dataframeQueries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["branchID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branchID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	var arg2 *datamodels.DAQueryScopeInput
	if tmp, ok := rawArgs["scope"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scope"))
		arg2, err = ec.unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scope"] = arg2
	var arg3 []string
	if tmp, ok := rawArgs["dimensionLevels"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevels"))
		arg3, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionLevels"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["aggregatedMeasures"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aggregatedMeasures"))
		arg4, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["aggregatedMeasures"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userID"))
		arg5, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg5
	var arg6 bool
	if tmp, ok := rawArgs["allData"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("allData"))
		arg6, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allData"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["localeID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("localeID"))
		arg7, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["localeID"] = arg7
	var arg8 []datamodels.DADimensionMemberAttribute
	if tmp, ok := rawArgs["dimMemberAttributes"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimMemberAttributes"))
		arg8, err = ec.unmarshalODADimensionMemberAttribute2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttributeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimMemberAttributes"] = arg8
	var arg9 []*datamodels.DADataViewAlias
	if tmp, ok := rawArgs["aliases"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aliases"))
		arg9, err = ec.unmarshalODADataViewAlias2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataViewAliasᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["aliases"] = arg9
	return args, nil
}

func (ec *executionContext) field_DADatatable_dimensionLevels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["dimensionID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["dimensionColumnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionColumnName"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensionColumnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_DADatatable_stagingTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["branchID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branchID"] = arg0
	var arg1 *datamodels.DAQueryScopeInput
	if tmp, ok := rawArgs["scope"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scope"))
		arg1, err = ec.unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scope"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["measures"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("measures"))
		arg2, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["measures"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userID"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["allData"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("allData"))
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["allData"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["numPartitions"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("numPartitions"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["numPartitions"] = arg5
	return args, nil
}

func (ec *executionContext) field_Entity_findDAAggregatedMeasureByDatasetIDAndColumnName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["columnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnName"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDABranchByDatasetIDAndID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDADatasetByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findDADatatableByDatasetIDAndID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDADimensionByDatasetIDAndColumnName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["columnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnName"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDADimensionLevelByDatasetIDAndColumnName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["columnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnName"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDADimensionMemberByDatasetIDAndID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Entity_findDAMeasureByDatasetIDAndColumnName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["columnName"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnName"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columnName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_daIngestStagingTables_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["datasetID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["datasetID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["stagingTableIDs"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("stagingTableIDs"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stagingTableIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_daDataset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DAAggregatedMeasure_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_measure(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Measure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAMeasure)
	fc.Result = res
	return ec.marshalNDAMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasure(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_aggregationType(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AggregationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DAAggregationType)
	fc.Result = res
	return ec.marshalNDAAggregationType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregationType(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_formula(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formula, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_columnName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAAggregatedMeasure_castType(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAAggregatedMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAAggregatedMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CastType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DAMeasureCastType)
	fc.Result = res
	return ec.marshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx, field.Selections, res)
}

func (ec *executionContext) _DABranch_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DABranch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DABranch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DABranch_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DABranch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DABranch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeColumn_name(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeColumn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeColumn",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeColumn_type(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeColumn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeColumn",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DAMeasureCastType)
	fc.Result = res
	return ec.marshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeDimLevelQuery_query(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeDimLevelQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeDimLevelQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeDimLevelQuery_partition(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeDimLevelQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeDimLevelQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeDimLevelQuery_metadata(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeDimLevelQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeDimLevelQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADataframeColumn)
	fc.Result = res
	return ec.marshalNDADataframeColumn2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeColumn(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeMeasureQuery_measureName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeMeasureQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeMeasureQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeMeasureQuery_query(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeMeasureQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeMeasureQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeMeasureQuery_partition(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeMeasureQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeMeasureQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeMeasureQuery_metadata(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeMeasureQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeMeasureQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADataframeColumn)
	fc.Result = res
	return ec.marshalNDADataframeColumn2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeColumn(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeQueries_partitions(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeQueries) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeQueries",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partitions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeQueries_dimLevelQueries(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeQueries) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeQueries",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimLevelQueries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADataframeDimLevelQuery)
	fc.Result = res
	return ec.marshalODADataframeDimLevelQuery2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeDimLevelQueryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataframeQueries_measureQueries(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataframeQueries) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataframeQueries",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasureQueries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADataframeMeasureQuery)
	fc.Result = res
	return ec.marshalODADataframeMeasureQuery2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeMeasureQueryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_name(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_description(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_version(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_datasourceID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_dataVersion(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADataset_dataVersion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADataset().DataVersion(rctx, obj, args["version"].(*string), args["branchID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAVersion)
	fc.Result = res
	return ec.marshalODAVersion2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAVersion(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_datatable(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADataset_datatable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADataset().Datatable(rctx, obj, args["id"].(*string), args["tableName"].(*string), args["measureColumnName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADatatable)
	fc.Result = res
	return ec.marshalODADatatable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatatable(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_dimensionLevels(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADataset_dimensionLevels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADataset().DimensionLevels(rctx, obj, args["dimensionID"].(*string), args["dimensionColumnName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADimensionLevel)
	fc.Result = res
	return ec.marshalODADimensionLevel2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADataset_measures(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADataset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADataset",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADataset_measures_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADataset().Measures(rctx, obj, args["aggregated"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]datamodels.DADatasetMeasure)
	fc.Result = res
	return ec.marshalODADatasetMeasure2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatasetMeasureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_tableName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_dimensionLevels(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADatatable_dimensionLevels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADatatable().DimensionLevels(rctx, obj, args["dimensionID"].(*string), args["dimensionColumnName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADimensionLevel)
	fc.Result = res
	return ec.marshalODADimensionLevel2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_measures(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADatatable().Measures(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DAMeasure)
	fc.Result = res
	return ec.marshalODAMeasure2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_dataView(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADatatable_dataView_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADatatable().DataView(rctx, obj, args["branchID"].(*string), args["version"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["dimensionLevels"].([]string), args["aggregatedMeasures"].([]string), args["userID"].(*string), args["allData"].(bool), args["localeID"].(*string), args["dimMemberAttributes"].([]datamodels.DADimensionMemberAttribute), args["aliases"].([]*datamodels.DADataViewAlias), args["partitioned"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DASQLQuery)
	fc.Result = res
	return ec.marshalNDASQLQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_dataframeQueries(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADatatable_dataframeQueries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADatatable().DataframeQueries(rctx, obj, args["branchID"].(*string), args["version"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["dimensionLevels"].([]string), args["aggregatedMeasures"].([]string), args["userID"].(*string), args["allData"].(bool), args["localeID"].(*string), args["dimMemberAttributes"].([]datamodels.DADimensionMemberAttribute), args["aliases"].([]*datamodels.DADataViewAlias))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADataframeQueries)
	fc.Result = res
	return ec.marshalNDADataframeQueries2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeQueries(ctx, field.Selections, res)
}

func (ec *executionContext) _DADatatable_stagingTable(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADatatable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADatatable",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DADatatable_stagingTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DADatatable().StagingTable(rctx, obj, args["branchID"].(*string), args["scope"].(*datamodels.DAQueryScopeInput), args["measures"].([]string), args["userID"].(*string), args["allData"].(bool), args["numPartitions"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAStagingTable)
	fc.Result = res
	return ec.marshalNDAStagingTable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAStagingTable(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimension_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimension_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimension_columnName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionLevel_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionLevel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionLevel_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionLevel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionLevel_dimension(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionLevel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dimension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DADimension)
	fc.Result = res
	return ec.marshalNDADimension2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimension(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionLevel_columnName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionLevel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_dimensionLevelColumnName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimensionLevelColumnName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_name(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_description(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DADimensionMember_externalID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DADimensionMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DADimensionMember",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DAMeasure_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAMeasure_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAMeasure_datatableID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatatableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAMeasure_columnName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAMeasure_castType(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAMeasure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAMeasure",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CastType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DAMeasureCastType)
	fc.Result = res
	return ec.marshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx, field.Selections, res)
}

func (ec *executionContext) _DAPageInfo_totalRows(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAPageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAPageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DAPageInfo().TotalRows(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DAPageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAPageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAPageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResult_dimensionMembers(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimensionMembers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DADimensionMember)
	fc.Result = res
	return ec.marshalODADimensionMember2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResult_measureValues(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasureValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalODADatasetMeasureValue2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResultConnection_edges(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResultConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResultConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*datamodels.DAQueryResultEdge)
	fc.Result = res
	return ec.marshalODAQueryResultEdge2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResultEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResultConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResultConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResultConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAPageInfo)
	fc.Result = res
	return ec.marshalNDAPageInfo2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResultConnection_error(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResultConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResultConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResultEdge_node(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResultEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResultEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAQueryResult)
	fc.Result = res
	return ec.marshalODAQueryResult2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResult(ctx, field.Selections, res)
}

func (ec *executionContext) _DAQueryResultEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAQueryResultEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAQueryResultEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DASQLQuery_metadata(ctx context.Context, field graphql.CollectedField, obj *datamodels.DASQLQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DASQLQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]datamodels.DASQLQueryColumn)
	fc.Result = res
	return ec.marshalNDASQLQueryColumn2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQueryColumn(ctx, field.Selections, res)
}

func (ec *executionContext) _DASQLQuery_query(ctx context.Context, field graphql.CollectedField, obj *datamodels.DASQLQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DASQLQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DASQLQuery_partitionedQueries(ctx context.Context, field graphql.CollectedField, obj *datamodels.DASQLQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DASQLQuery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartitionedQueries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DASQLQueryColumn_name(ctx context.Context, field graphql.CollectedField, obj *datamodels.DASQLQueryColumn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DASQLQueryColumn",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DASQLQueryColumn_type(ctx context.Context, field graphql.CollectedField, obj *datamodels.DASQLQueryColumn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DASQLQueryColumn",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(datamodels.DAMeasureCastType)
	fc.Result = res
	return ec.marshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx, field.Selections, res)
}

func (ec *executionContext) _DAStagingTable_datasetID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAStagingTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAStagingTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAStagingTable_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAStagingTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAStagingTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAStagingTable_tableName(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAStagingTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAStagingTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_id(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_branchID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BranchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_userID(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_status(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(datamodels.DAVersionStatus)
	fc.Result = res
	return ec.marshalODAVersionStatus2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAVersionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_appliedTimestamp(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_startedTimestamp(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DAVersion_keepaliveTimestamp(ctx context.Context, field graphql.CollectedField, obj *datamodels.DAVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DAVersion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeepAliveTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDAAggregatedMeasureByDatasetIDAndColumnName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDAAggregatedMeasureByDatasetIDAndColumnName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDAAggregatedMeasureByDatasetIDAndColumnName(rctx, args["datasetID"].(string), args["columnName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAAggregatedMeasure)
	fc.Result = res
	return ec.marshalNDAAggregatedMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregatedMeasure(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDABranchByDatasetIDAndID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDABranchByDatasetIDAndID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDABranchByDatasetIDAndID(rctx, args["datasetID"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DABranch)
	fc.Result = res
	return ec.marshalNDABranch2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDABranch(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDADatasetByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDADatasetByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDADatasetByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADataset)
	fc.Result = res
	return ec.marshalNDADataset2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataset(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDADatatableByDatasetIDAndID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDADatatableByDatasetIDAndID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDADatatableByDatasetIDAndID(rctx, args["datasetID"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADatatable)
	fc.Result = res
	return ec.marshalNDADatatable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatatable(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDADimensionByDatasetIDAndColumnName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDADimensionByDatasetIDAndColumnName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDADimensionByDatasetIDAndColumnName(rctx, args["datasetID"].(string), args["columnName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADimension)
	fc.Result = res
	return ec.marshalNDADimension2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimension(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDADimensionLevelByDatasetIDAndColumnName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDADimensionLevelByDatasetIDAndColumnName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDADimensionLevelByDatasetIDAndColumnName(rctx, args["datasetID"].(string), args["columnName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADimensionLevel)
	fc.Result = res
	return ec.marshalNDADimensionLevel2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevel(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDADimensionMemberByDatasetIDAndID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDADimensionMemberByDatasetIDAndID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDADimensionMemberByDatasetIDAndID(rctx, args["datasetID"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADimensionMember)
	fc.Result = res
	return ec.marshalNDADimensionMember2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDAMeasureByDatasetIDAndColumnName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Entity",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDAMeasureByDatasetIDAndColumnName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDAMeasureByDatasetIDAndColumnName(rctx, args["datasetID"].(string), args["columnName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*datamodels.DAMeasure)
	fc.Result = res
	return ec.marshalNDAMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasure(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_daIngestStagingTables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_daIngestStagingTables_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DaIngestStagingTables(rctx, args["datasetID"].(string), args["stagingTableIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_daDataset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_daDataset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DaDataset(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*datamodels.DADataset)
	fc.Result = res
	return ec.marshalODADataset2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataset(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query__entities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, args["representations"].([]map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "_Service",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDADataViewAlias(ctx context.Context, obj interface{}) (datamodels.DADataViewAlias, error) {
	var it datamodels.DADataViewAlias
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "src":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("src"))
			it.Src, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dst":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dst"))
			it.Dst, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDADimMembersQueryInput(ctx context.Context, obj interface{}) (datamodels.DADimMembersQueryInput, error) {
	var it datamodels.DADimMembersQueryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "datasetID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
			it.DatasetID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "datatable":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datatable"))
			it.Datatable, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
			it.BranchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scope":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scope"))
			it.Scope, err = ec.unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("search"))
			it.Search, err = ec.unmarshalODAQuerySearchInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySearchInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimensionLevels":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevels"))
			it.DimensionLevels, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalODAQuerySortInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "first":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("first"))
			it.First, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("after"))
			it.After, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDADimensionFilterInput(ctx context.Context, obj interface{}) (datamodels.DADimensionFilterInput, error) {
	var it datamodels.DADimensionFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionColumnName"))
			it.DimensionColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("and"))
			it.AND, err = ec.unmarshalODADimensionLevelFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("or"))
			it.OR, err = ec.unmarshalODADimensionLevelFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDADimensionLevelFilterInput(ctx context.Context, obj interface{}) (datamodels.DADimensionLevelFilterInput, error) {
	var it datamodels.DADimensionLevelFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionLevelColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevelColumnName"))
			it.DimensionLevelColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmpOperator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cmpOperator"))
			it.CmpOperator, err = ec.unmarshalNDAComparisonOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAComparisonOperator(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("values"))
			it.Values, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDADimensionLevelSearchFilterInput(ctx context.Context, obj interface{}) (datamodels.DADimensionLevelSearchFilterInput, error) {
	var it datamodels.DADimensionLevelSearchFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionLevelColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevelColumnName"))
			it.DimensionLevelColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("keyword"))
			it.Keyword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDADimensionSearchFilterInput(ctx context.Context, obj interface{}) (datamodels.DADimensionSearchFilterInput, error) {
	var it datamodels.DADimensionSearchFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionColumnName"))
			it.DimensionColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "levelFilters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("levelFilters"))
			it.LevelFilters, err = ec.unmarshalNDADimensionLevelSearchFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelSearchFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAMeasureFilterInput(ctx context.Context, obj interface{}) (datamodels.DAMeasureFilterInput, error) {
	var it datamodels.DAMeasureFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "measureColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("measureColumnName"))
			it.MeasureColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "measureMultiplier":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("measureMultiplier"))
			it.MeasureMultiplier, err = ec.unmarshalOFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("operator"))
			it.Operator, err = ec.unmarshalNDARelationalOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDARelationalOperator(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalODADatasetMeasureValue2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dstMeasureColumnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dstMeasureColumnName"))
			it.DstMeasureColumnName, err = ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dstMultiplier":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dstMultiplier"))
			it.DstMultiplier, err = ec.unmarshalOFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQueryInput(ctx context.Context, obj interface{}) (datamodels.DAQueryInput, error) {
	var it datamodels.DAQueryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "datasetID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datasetID"))
			it.DatasetID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "datatable":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("datatable"))
			it.Datatable, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("branchID"))
			it.BranchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scope":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scope"))
			it.Scope, err = ec.unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimensionLevels":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionLevels"))
			it.DimensionLevels, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "aggregatedMeasures":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aggregatedMeasures"))
			it.AggregatedMeasures, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "postAggFilter":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("postAggFilter"))
			it.PostAggFilter, err = ec.unmarshalODAQueryPostAggFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryPostAggFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalODAQuerySortInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "postAggGrouping":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("postAggGrouping"))
			it.PostAggGrouping, err = ec.unmarshalODAQueryPostAggGroupingInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryPostAggGroupingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "first":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("first"))
			it.First, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("after"))
			it.After, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQueryPostAggFilterInput(ctx context.Context, obj interface{}) (datamodels.DAQueryPostAggFilterInput, error) {
	var it datamodels.DAQueryPostAggFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "measureFilters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("measureFilters"))
			it.MeasureFilters, err = ec.unmarshalODAMeasureFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("and"))
			it.AND, err = ec.unmarshalODAMeasureFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("or"))
			it.OR, err = ec.unmarshalODAMeasureFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQueryPostAggGroupingInput(ctx context.Context, obj interface{}) (datamodels.DAQueryPostAggGroupingInput, error) {
	var it datamodels.DAQueryPostAggGroupingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "groupByColumns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("groupByColumns"))
			it.GroupByColumns, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "aggregatedMeasures":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("aggregatedMeasures"))
			it.AggregatedMeasures, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQueryScopeInput(ctx context.Context, obj interface{}) (datamodels.DAQueryScopeInput, error) {
	var it datamodels.DAQueryScopeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionFilters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionFilters"))
			it.DimensionFilters, err = ec.unmarshalODADimensionFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQuerySearchInput(ctx context.Context, obj interface{}) (datamodels.DAQuerySearchInput, error) {
	var it datamodels.DAQuerySearchInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dimensionFilters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dimensionFilters"))
			it.DimensionFilters, err = ec.unmarshalODADimensionSearchFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionSearchFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQuerySortEntryInput(ctx context.Context, obj interface{}) (datamodels.DAQuerySortEntryInput, error) {
	var it datamodels.DAQuerySortEntryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "columnName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnName"))
			it.ColumnName, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("direction"))
			it.Direction, err = ec.unmarshalNDAQuerySortDirection2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDAQuerySortInput(ctx context.Context, obj interface{}) (datamodels.DAQuerySortInput, error) {
	var it datamodels.DAQuerySortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "entries":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("entries"))
			it.Entries, err = ec.unmarshalODAQuerySortEntryInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortEntryInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _DADatasetMeasure(ctx context.Context, sel ast.SelectionSet, obj datamodels.DADatasetMeasure) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case datamodels.DAMeasure:
		return ec._DAMeasure(ctx, sel, &obj)
	case *datamodels.DAMeasure:
		if obj == nil {
			return graphql.Null
		}
		return ec._DAMeasure(ctx, sel, obj)
	case datamodels.DAAggregatedMeasure:
		return ec._DAAggregatedMeasure(ctx, sel, &obj)
	case *datamodels.DAAggregatedMeasure:
		if obj == nil {
			return graphql.Null
		}
		return ec._DAAggregatedMeasure(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case datamodels.DAAggregatedMeasure:
		return ec._DAAggregatedMeasure(ctx, sel, &obj)
	case *datamodels.DAAggregatedMeasure:
		if obj == nil {
			return graphql.Null
		}
		return ec._DAAggregatedMeasure(ctx, sel, obj)
	case datamodels.DABranch:
		return ec._DABranch(ctx, sel, &obj)
	case *datamodels.DABranch:
		if obj == nil {
			return graphql.Null
		}
		return ec._DABranch(ctx, sel, obj)
	case datamodels.DADataset:
		return ec._DADataset(ctx, sel, &obj)
	case *datamodels.DADataset:
		if obj == nil {
			return graphql.Null
		}
		return ec._DADataset(ctx, sel, obj)
	case datamodels.DADatatable:
		return ec._DADatatable(ctx, sel, &obj)
	case *datamodels.DADatatable:
		if obj == nil {
			return graphql.Null
		}
		return ec._DADatatable(ctx, sel, obj)
	case datamodels.DADimension:
		return ec._DADimension(ctx, sel, &obj)
	case *datamodels.DADimension:
		if obj == nil {
			return graphql.Null
		}
		return ec._DADimension(ctx, sel, obj)
	case datamodels.DADimensionLevel:
		return ec._DADimensionLevel(ctx, sel, &obj)
	case *datamodels.DADimensionLevel:
		if obj == nil {
			return graphql.Null
		}
		return ec._DADimensionLevel(ctx, sel, obj)
	case datamodels.DADimensionMember:
		return ec._DADimensionMember(ctx, sel, &obj)
	case *datamodels.DADimensionMember:
		if obj == nil {
			return graphql.Null
		}
		return ec._DADimensionMember(ctx, sel, obj)
	case datamodels.DAMeasure:
		return ec._DAMeasure(ctx, sel, &obj)
	case *datamodels.DAMeasure:
		if obj == nil {
			return graphql.Null
		}
		return ec._DAMeasure(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dAAggregatedMeasureImplementors = []string{"DAAggregatedMeasure", "DADatasetMeasure", "_Entity"}

func (ec *executionContext) _DAAggregatedMeasure(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAAggregatedMeasure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAAggregatedMeasureImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAAggregatedMeasure")
		case "datasetID":
			out.Values[i] = ec._DAAggregatedMeasure_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DAAggregatedMeasure_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "measure":
			out.Values[i] = ec._DAAggregatedMeasure_measure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aggregationType":
			out.Values[i] = ec._DAAggregatedMeasure_aggregationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formula":
			out.Values[i] = ec._DAAggregatedMeasure_formula(ctx, field, obj)
		case "columnName":
			out.Values[i] = ec._DAAggregatedMeasure_columnName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "castType":
			out.Values[i] = ec._DAAggregatedMeasure_castType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dABranchImplementors = []string{"DABranch", "_Entity"}

func (ec *executionContext) _DABranch(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DABranch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dABranchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DABranch")
		case "datasetID":
			out.Values[i] = ec._DABranch_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DABranch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADataframeColumnImplementors = []string{"DADataframeColumn"}

func (ec *executionContext) _DADataframeColumn(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADataframeColumn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADataframeColumnImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADataframeColumn")
		case "name":
			out.Values[i] = ec._DADataframeColumn_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._DADataframeColumn_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADataframeDimLevelQueryImplementors = []string{"DADataframeDimLevelQuery"}

func (ec *executionContext) _DADataframeDimLevelQuery(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADataframeDimLevelQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADataframeDimLevelQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADataframeDimLevelQuery")
		case "query":
			out.Values[i] = ec._DADataframeDimLevelQuery_query(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partition":
			out.Values[i] = ec._DADataframeDimLevelQuery_partition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadata":
			out.Values[i] = ec._DADataframeDimLevelQuery_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADataframeMeasureQueryImplementors = []string{"DADataframeMeasureQuery"}

func (ec *executionContext) _DADataframeMeasureQuery(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADataframeMeasureQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADataframeMeasureQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADataframeMeasureQuery")
		case "measureName":
			out.Values[i] = ec._DADataframeMeasureQuery_measureName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "query":
			out.Values[i] = ec._DADataframeMeasureQuery_query(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partition":
			out.Values[i] = ec._DADataframeMeasureQuery_partition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadata":
			out.Values[i] = ec._DADataframeMeasureQuery_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADataframeQueriesImplementors = []string{"DADataframeQueries"}

func (ec *executionContext) _DADataframeQueries(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADataframeQueries) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADataframeQueriesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADataframeQueries")
		case "partitions":
			out.Values[i] = ec._DADataframeQueries_partitions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dimLevelQueries":
			out.Values[i] = ec._DADataframeQueries_dimLevelQueries(ctx, field, obj)
		case "measureQueries":
			out.Values[i] = ec._DADataframeQueries_measureQueries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADatasetImplementors = []string{"DADataset", "_Entity"}

func (ec *executionContext) _DADataset(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADataset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADatasetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADataset")
		case "id":
			out.Values[i] = ec._DADataset_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._DADataset_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._DADataset_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._DADataset_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "datasourceID":
			out.Values[i] = ec._DADataset_datasourceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dataVersion":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADataset_dataVersion(ctx, field, obj)
				return res
			})
		case "datatable":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADataset_datatable(ctx, field, obj)
				return res
			})
		case "dimensionLevels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADataset_dimensionLevels(ctx, field, obj)
				return res
			})
		case "measures":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADataset_measures(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADatatableImplementors = []string{"DADatatable", "_Entity"}

func (ec *executionContext) _DADatatable(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADatatable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADatatableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADatatable")
		case "datasetID":
			out.Values[i] = ec._DADatatable_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "id":
			out.Values[i] = ec._DADatatable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tableName":
			out.Values[i] = ec._DADatatable_tableName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dimensionLevels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADatatable_dimensionLevels(ctx, field, obj)
				return res
			})
		case "measures":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADatatable_measures(ctx, field, obj)
				return res
			})
		case "dataView":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADatatable_dataView(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dataframeQueries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADatatable_dataframeQueries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "stagingTable":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DADatatable_stagingTable(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADimensionImplementors = []string{"DADimension", "_Entity"}

func (ec *executionContext) _DADimension(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADimension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADimensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADimension")
		case "datasetID":
			out.Values[i] = ec._DADimension_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DADimension_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "columnName":
			out.Values[i] = ec._DADimension_columnName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADimensionLevelImplementors = []string{"DADimensionLevel", "_Entity"}

func (ec *executionContext) _DADimensionLevel(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADimensionLevel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADimensionLevelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADimensionLevel")
		case "datasetID":
			out.Values[i] = ec._DADimensionLevel_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DADimensionLevel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dimension":
			out.Values[i] = ec._DADimensionLevel_dimension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "columnName":
			out.Values[i] = ec._DADimensionLevel_columnName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dADimensionMemberImplementors = []string{"DADimensionMember", "_Entity"}

func (ec *executionContext) _DADimensionMember(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DADimensionMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dADimensionMemberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DADimensionMember")
		case "datasetID":
			out.Values[i] = ec._DADimensionMember_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DADimensionMember_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dimensionLevelColumnName":
			out.Values[i] = ec._DADimensionMember_dimensionLevelColumnName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DADimensionMember_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._DADimensionMember_description(ctx, field, obj)
		case "externalID":
			out.Values[i] = ec._DADimensionMember_externalID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAMeasureImplementors = []string{"DAMeasure", "DADatasetMeasure", "_Entity"}

func (ec *executionContext) _DAMeasure(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAMeasure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAMeasureImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAMeasure")
		case "datasetID":
			out.Values[i] = ec._DAMeasure_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DAMeasure_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "datatableID":
			out.Values[i] = ec._DAMeasure_datatableID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "columnName":
			out.Values[i] = ec._DAMeasure_columnName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "castType":
			out.Values[i] = ec._DAMeasure_castType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAPageInfoImplementors = []string{"DAPageInfo"}

func (ec *executionContext) _DAPageInfo(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAPageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAPageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAPageInfo")
		case "totalRows":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DAPageInfo_totalRows(ctx, field, obj)
				return res
			})
		case "hasNextPage":
			out.Values[i] = ec._DAPageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAQueryResultImplementors = []string{"DAQueryResult"}

func (ec *executionContext) _DAQueryResult(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAQueryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAQueryResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAQueryResult")
		case "dimensionMembers":
			out.Values[i] = ec._DAQueryResult_dimensionMembers(ctx, field, obj)
		case "measureValues":
			out.Values[i] = ec._DAQueryResult_measureValues(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAQueryResultConnectionImplementors = []string{"DAQueryResultConnection"}

func (ec *executionContext) _DAQueryResultConnection(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAQueryResultConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAQueryResultConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAQueryResultConnection")
		case "edges":
			out.Values[i] = ec._DAQueryResultConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DAQueryResultConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._DAQueryResultConnection_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAQueryResultEdgeImplementors = []string{"DAQueryResultEdge"}

func (ec *executionContext) _DAQueryResultEdge(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAQueryResultEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAQueryResultEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAQueryResultEdge")
		case "node":
			out.Values[i] = ec._DAQueryResultEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._DAQueryResultEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dASQLQueryImplementors = []string{"DASQLQuery"}

func (ec *executionContext) _DASQLQuery(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DASQLQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dASQLQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DASQLQuery")
		case "metadata":
			out.Values[i] = ec._DASQLQuery_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "query":
			out.Values[i] = ec._DASQLQuery_query(ctx, field, obj)
		case "partitionedQueries":
			out.Values[i] = ec._DASQLQuery_partitionedQueries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dASQLQueryColumnImplementors = []string{"DASQLQueryColumn"}

func (ec *executionContext) _DASQLQueryColumn(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DASQLQueryColumn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dASQLQueryColumnImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DASQLQueryColumn")
		case "name":
			out.Values[i] = ec._DASQLQueryColumn_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._DASQLQueryColumn_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAStagingTableImplementors = []string{"DAStagingTable"}

func (ec *executionContext) _DAStagingTable(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAStagingTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAStagingTableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAStagingTable")
		case "datasetID":
			out.Values[i] = ec._DAStagingTable_datasetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._DAStagingTable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableName":
			out.Values[i] = ec._DAStagingTable_tableName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dAVersionImplementors = []string{"DAVersion"}

func (ec *executionContext) _DAVersion(ctx context.Context, sel ast.SelectionSet, obj *datamodels.DAVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dAVersionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DAVersion")
		case "id":
			out.Values[i] = ec._DAVersion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branchID":
			out.Values[i] = ec._DAVersion_branchID(ctx, field, obj)
		case "userID":
			out.Values[i] = ec._DAVersion_userID(ctx, field, obj)
		case "status":
			out.Values[i] = ec._DAVersion_status(ctx, field, obj)
		case "appliedTimestamp":
			out.Values[i] = ec._DAVersion_appliedTimestamp(ctx, field, obj)
		case "startedTimestamp":
			out.Values[i] = ec._DAVersion_startedTimestamp(ctx, field, obj)
		case "keepaliveTimestamp":
			out.Values[i] = ec._DAVersion_keepaliveTimestamp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findDAAggregatedMeasureByDatasetIDAndColumnName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDAAggregatedMeasureByDatasetIDAndColumnName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDABranchByDatasetIDAndID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDABranchByDatasetIDAndID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDADatasetByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDADatasetByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDADatatableByDatasetIDAndID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDADatatableByDatasetIDAndID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDADimensionByDatasetIDAndColumnName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDADimensionByDatasetIDAndColumnName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDADimensionLevelByDatasetIDAndColumnName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDADimensionLevelByDatasetIDAndColumnName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDADimensionMemberByDatasetIDAndID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDADimensionMemberByDatasetIDAndID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDAMeasureByDatasetIDAndColumnName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDAMeasureByDatasetIDAndColumnName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "daIngestStagingTables":
			out.Values[i] = ec._Mutation_daIngestStagingTables(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "daDataset":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_daDataset(ctx, field)
				return res
			})
		case "_entities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDAAggregatedMeasure2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregatedMeasure(ctx context.Context, sel ast.SelectionSet, v datamodels.DAAggregatedMeasure) graphql.Marshaler {
	return ec._DAAggregatedMeasure(ctx, sel, &v)
}

func (ec *executionContext) marshalNDAAggregatedMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregatedMeasure(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAAggregatedMeasure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DAAggregatedMeasure(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDAAggregationType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregationType(ctx context.Context, v interface{}) (datamodels.DAAggregationType, error) {
	var res datamodels.DAAggregationType
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAAggregationType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAAggregationType(ctx context.Context, sel ast.SelectionSet, v datamodels.DAAggregationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDABranch2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDABranch(ctx context.Context, sel ast.SelectionSet, v datamodels.DABranch) graphql.Marshaler {
	return ec._DABranch(ctx, sel, &v)
}

func (ec *executionContext) marshalNDABranch2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDABranch(ctx context.Context, sel ast.SelectionSet, v *datamodels.DABranch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DABranch(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDAComparisonOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAComparisonOperator(ctx context.Context, v interface{}) (datamodels.DAComparisonOperator, error) {
	var res datamodels.DAComparisonOperator
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAComparisonOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAComparisonOperator(ctx context.Context, sel ast.SelectionSet, v datamodels.DAComparisonOperator) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDADataViewAlias2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataViewAlias(ctx context.Context, v interface{}) (*datamodels.DADataViewAlias, error) {
	res, err := ec.unmarshalInputDADataViewAlias(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDADataframeColumn2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeColumn(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DADataframeColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODADataframeColumn2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDADataframeDimLevelQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeDimLevelQuery(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataframeDimLevelQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADataframeDimLevelQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNDADataframeMeasureQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeMeasureQuery(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataframeMeasureQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADataframeMeasureQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNDADataframeQueries2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeQueries(ctx context.Context, sel ast.SelectionSet, v datamodels.DADataframeQueries) graphql.Marshaler {
	return ec._DADataframeQueries(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADataframeQueries2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeQueries(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataframeQueries) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADataframeQueries(ctx, sel, v)
}

func (ec *executionContext) marshalNDADataset2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataset(ctx context.Context, sel ast.SelectionSet, v datamodels.DADataset) graphql.Marshaler {
	return ec._DADataset(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADataset2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataset(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataset) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADataset(ctx, sel, v)
}

func (ec *executionContext) marshalNDADatasetMeasure2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatasetMeasure(ctx context.Context, sel ast.SelectionSet, v datamodels.DADatasetMeasure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADatasetMeasure(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDADatasetMeasureValue2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDADatasetMeasureValue2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDADatatable2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatatable(ctx context.Context, sel ast.SelectionSet, v datamodels.DADatatable) graphql.Marshaler {
	return ec._DADatatable(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADatatable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatatable(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADatatable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADatatable(ctx, sel, v)
}

func (ec *executionContext) marshalNDADimension2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimension(ctx context.Context, sel ast.SelectionSet, v datamodels.DADimension) graphql.Marshaler {
	return ec._DADimension(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADimension2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimension(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADimension) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADimension(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDADimensionFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionFilterInput(ctx context.Context, v interface{}) (*datamodels.DADimensionFilterInput, error) {
	res, err := ec.unmarshalInputDADimensionFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDADimensionLevel2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevel(ctx context.Context, sel ast.SelectionSet, v datamodels.DADimensionLevel) graphql.Marshaler {
	return ec._DADimensionLevel(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADimensionLevel2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevel(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADimensionLevel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADimensionLevel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDADimensionLevelFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelFilterInput(ctx context.Context, v interface{}) (*datamodels.DADimensionLevelFilterInput, error) {
	res, err := ec.unmarshalInputDADimensionLevelFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDADimensionLevelSearchFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelSearchFilterInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DADimensionLevelSearchFilterInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DADimensionLevelSearchFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADimensionLevelSearchFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelSearchFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDADimensionLevelSearchFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelSearchFilterInput(ctx context.Context, v interface{}) (*datamodels.DADimensionLevelSearchFilterInput, error) {
	res, err := ec.unmarshalInputDADimensionLevelSearchFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDADimensionMember2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMember(ctx context.Context, sel ast.SelectionSet, v datamodels.DADimensionMember) graphql.Marshaler {
	return ec._DADimensionMember(ctx, sel, &v)
}

func (ec *executionContext) marshalNDADimensionMember2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMember(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADimensionMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DADimensionMember(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDADimensionMemberAttribute2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttribute(ctx context.Context, v interface{}) (datamodels.DADimensionMemberAttribute, error) {
	var res datamodels.DADimensionMemberAttribute
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDADimensionMemberAttribute2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttribute(ctx context.Context, sel ast.SelectionSet, v datamodels.DADimensionMemberAttribute) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDADimensionSearchFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionSearchFilterInput(ctx context.Context, v interface{}) (*datamodels.DADimensionSearchFilterInput, error) {
	res, err := ec.unmarshalInputDADimensionSearchFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAMeasure2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasure(ctx context.Context, sel ast.SelectionSet, v datamodels.DAMeasure) graphql.Marshaler {
	return ec._DAMeasure(ctx, sel, &v)
}

func (ec *executionContext) marshalNDAMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasure(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAMeasure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DAMeasure(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx context.Context, v interface{}) (datamodels.DAMeasureCastType, error) {
	var res datamodels.DAMeasureCastType
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAMeasureCastType2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureCastType(ctx context.Context, sel ast.SelectionSet, v datamodels.DAMeasureCastType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDAMeasureFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInput(ctx context.Context, v interface{}) (*datamodels.DAMeasureFilterInput, error) {
	res, err := ec.unmarshalInputDAMeasureFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAPageInfo2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAPageInfo(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAPageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DAPageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDAQuerySortDirection2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortDirection(ctx context.Context, v interface{}) (datamodels.DAQuerySortDirection, error) {
	var res datamodels.DAQuerySortDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDAQuerySortDirection2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortDirection(ctx context.Context, sel ast.SelectionSet, v datamodels.DAQuerySortDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDAQuerySortEntryInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortEntryInput(ctx context.Context, v interface{}) (*datamodels.DAQuerySortEntryInput, error) {
	res, err := ec.unmarshalInputDAQuerySortEntryInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDARelationalOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDARelationalOperator(ctx context.Context, v interface{}) (datamodels.DARelationalOperator, error) {
	var res datamodels.DARelationalOperator
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDARelationalOperator2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDARelationalOperator(ctx context.Context, sel ast.SelectionSet, v datamodels.DARelationalOperator) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDASQLQuery2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQuery(ctx context.Context, sel ast.SelectionSet, v datamodels.DASQLQuery) graphql.Marshaler {
	return ec._DASQLQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNDASQLQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQuery(ctx context.Context, sel ast.SelectionSet, v *datamodels.DASQLQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DASQLQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNDASQLQueryColumn2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQueryColumn(ctx context.Context, sel ast.SelectionSet, v []datamodels.DASQLQueryColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODASQLQueryColumn2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQueryColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDAStagingTable2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAStagingTable(ctx context.Context, sel ast.SelectionSet, v datamodels.DAStagingTable) graphql.Marshaler {
	return ec._DAStagingTable(ctx, sel, &v)
}

func (ec *executionContext) marshalNDAStagingTable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAStagingTable(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAStagingTable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DAStagingTable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalODADataViewAlias2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataViewAliasᚄ(ctx context.Context, v interface{}) ([]*datamodels.DADataViewAlias, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DADataViewAlias, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADataViewAlias2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataViewAlias(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADataframeColumn2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeColumn(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataframeColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DADataframeColumn(ctx, sel, v)
}

func (ec *executionContext) marshalODADataframeDimLevelQuery2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeDimLevelQueryᚄ(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DADataframeDimLevelQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADataframeDimLevelQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeDimLevelQuery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODADataframeMeasureQuery2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeMeasureQueryᚄ(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DADataframeMeasureQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADataframeMeasureQuery2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataframeMeasureQuery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODADataset2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADataset(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADataset) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DADataset(ctx, sel, v)
}

func (ec *executionContext) marshalODADatasetMeasure2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatasetMeasureᚄ(ctx context.Context, sel ast.SelectionSet, v []datamodels.DADatasetMeasure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADatasetMeasure2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatasetMeasure(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODADatasetMeasureValue2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADatasetMeasureValue2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADatasetMeasureValue2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNDADatasetMeasureValue2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODADatasetMeasureValue2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalODADatasetMeasureValue2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADatasetMeasureValue2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODADatasetMeasureValue2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODADatasetMeasureValue2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODADatasetMeasureValue2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalODADatatable2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADatatable(ctx context.Context, sel ast.SelectionSet, v *datamodels.DADatatable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DADatatable(ctx, sel, v)
}

func (ec *executionContext) unmarshalODADimensionFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionFilterInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DADimensionFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DADimensionFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADimensionFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADimensionLevel2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelᚄ(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DADimensionLevel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADimensionLevel2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODADimensionLevelFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelFilterInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DADimensionLevelFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DADimensionLevelFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADimensionLevelFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionLevelFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADimensionMember2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DADimensionMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADimensionMember2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODADimensionMemberAttribute2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttributeᚄ(ctx context.Context, v interface{}) ([]datamodels.DADimensionMemberAttribute, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]datamodels.DADimensionMemberAttribute, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADimensionMemberAttribute2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttribute(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODADimensionMemberAttribute2ᚕbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []datamodels.DADimensionMemberAttribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDADimensionMemberAttribute2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionMemberAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODADimensionSearchFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionSearchFilterInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DADimensionSearchFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DADimensionSearchFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDADimensionSearchFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDADimensionSearchFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODAMeasure2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureᚄ(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DAMeasure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDAMeasure2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasure(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODAMeasureFilterInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DAMeasureFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DAMeasureFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDAMeasureFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAMeasureFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODAQueryPostAggFilterInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryPostAggFilterInput(ctx context.Context, v interface{}) (*datamodels.DAQueryPostAggFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDAQueryPostAggFilterInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalODAQueryPostAggGroupingInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryPostAggGroupingInput(ctx context.Context, v interface{}) (*datamodels.DAQueryPostAggGroupingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDAQueryPostAggGroupingInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODAQueryResult2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResult(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAQueryResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DAQueryResult(ctx, sel, v)
}

func (ec *executionContext) marshalODAQueryResultEdge2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResultEdge(ctx context.Context, sel ast.SelectionSet, v []*datamodels.DAQueryResultEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODAQueryResultEdge2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResultEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODAQueryResultEdge2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryResultEdge(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAQueryResultEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DAQueryResultEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalODAQueryScopeInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQueryScopeInput(ctx context.Context, v interface{}) (*datamodels.DAQueryScopeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDAQueryScopeInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalODAQuerySearchInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySearchInput(ctx context.Context, v interface{}) (*datamodels.DAQuerySearchInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDAQuerySearchInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalODAQuerySortEntryInput2ᚕᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortEntryInputᚄ(ctx context.Context, v interface{}) ([]*datamodels.DAQuerySortEntryInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*datamodels.DAQuerySortEntryInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDAQuerySortEntryInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortEntryInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODAQuerySortInput2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAQuerySortInput(ctx context.Context, v interface{}) (*datamodels.DAQuerySortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDAQuerySortInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODASQLQueryColumn2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDASQLQueryColumn(ctx context.Context, sel ast.SelectionSet, v datamodels.DASQLQueryColumn) graphql.Marshaler {
	return ec._DASQLQueryColumn(ctx, sel, &v)
}

func (ec *executionContext) marshalODAVersion2ᚖbitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAVersion(ctx context.Context, sel ast.SelectionSet, v *datamodels.DAVersion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DAVersion(ctx, sel, v)
}

func (ec *executionContext) unmarshalODAVersionStatus2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAVersionStatus(ctx context.Context, v interface{}) (datamodels.DAVersionStatus, error) {
	var res datamodels.DAVersionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODAVersionStatus2bitbucketᚗorgᚋantuitincᚋespᚑdaᚑapiᚋinternalᚋdatamodelsᚐDAVersionStatus(ctx context.Context, sel ast.SelectionSet, v datamodels.DAVersionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
